// <auto-generated />
using System;
using DocumentManager.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentManager.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DocumentManager.DAL.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.IncomingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentCodeFromIssuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomingDocumentNumber")
                        .HasColumnType("int");

                    b.Property<int>("IssuingUnitID")
                        .HasColumnType("int");

                    b.Property<int>("RecipientGroupID")
                        .HasColumnType("int");

                    b.Property<int>("RelatedProjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReleaseDateFromIssuer")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IssuingUnitID");

                    b.HasIndex("RecipientGroupID");

                    b.HasIndex("RelatedProjectID");

                    b.ToTable("IncomingDocuments");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.IssuingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IssuingUnitName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("IssuingUnits");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssuingUnitID")
                        .HasColumnType("int");

                    b.Property<int>("OutgoingDocumentFormatID")
                        .HasColumnType("int");

                    b.Property<int>("OutgoingDocumentNumber")
                        .HasColumnType("int");

                    b.Property<int>("OutgoingDocumentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RecipientGroupID")
                        .HasColumnType("int");

                    b.Property<int>("RelatedProjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IssuingUnitID");

                    b.HasIndex("OutgoingDocumentFormatID");

                    b.HasIndex("OutgoingDocumentTypeID");

                    b.HasIndex("RecipientGroupID");

                    b.HasIndex("RelatedProjectID");

                    b.ToTable("OutgoingDocuments");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocumentFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OutgoingDocumentFormatName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OutgoingDocumentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingDocumentTypeId");

                    b.ToTable("OutgoingDocumentFormats");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OutgoingDocumentTypeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OutgoingDocumentTypes");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.RecipientGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RecipientGroupName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("RecipientGroups");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.RecipientGroupEmployee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("RecipientGroupID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID", "RecipientGroupID");

                    b.HasIndex("RecipientGroupID");

                    b.ToTable("RecipientGroupEmployees");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.RelatedProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RelatedProjectName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("RelatedProjects");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.Employee", b =>
                {
                    b.HasOne("DocumentManager.DAL.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.IncomingDocument", b =>
                {
                    b.HasOne("DocumentManager.DAL.Models.IssuingUnit", "IssuingUnit")
                        .WithMany("IncomingDocuments")
                        .HasForeignKey("IssuingUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.RecipientGroup", "RecipientGroup")
                        .WithMany("IncomingDocuments")
                        .HasForeignKey("RecipientGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.RelatedProject", "RelatedProject")
                        .WithMany("IncomingDocuments")
                        .HasForeignKey("RelatedProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IssuingUnit");

                    b.Navigation("RecipientGroup");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocument", b =>
                {
                    b.HasOne("DocumentManager.DAL.Models.IssuingUnit", "IssuingUnit")
                        .WithMany("OutgoingDocuments")
                        .HasForeignKey("IssuingUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.OutgoingDocumentFormat", "OutgoingDocumentFormat")
                        .WithMany("OutgoingDocuments")
                        .HasForeignKey("OutgoingDocumentFormatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.OutgoingDocumentType", "OutgoingDocumentType")
                        .WithMany("OutgoingDocuments")
                        .HasForeignKey("OutgoingDocumentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.RecipientGroup", "RecipientGroup")
                        .WithMany("OutgoingDocuments")
                        .HasForeignKey("RecipientGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.RelatedProject", "RelatedProject")
                        .WithMany("OutgoingDocuments")
                        .HasForeignKey("RelatedProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IssuingUnit");

                    b.Navigation("OutgoingDocumentFormat");

                    b.Navigation("OutgoingDocumentType");

                    b.Navigation("RecipientGroup");

                    b.Navigation("RelatedProject");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocumentFormat", b =>
                {
                    b.HasOne("DocumentManager.DAL.Models.OutgoingDocumentType", "OutgoingDocumentType")
                        .WithMany("OutgoingDocumentFormats")
                        .HasForeignKey("OutgoingDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OutgoingDocumentType");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.RecipientGroupEmployee", b =>
                {
                    b.HasOne("DocumentManager.DAL.Models.Employee", "Employee")
                        .WithMany("RecipientGroupEmployees")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentManager.DAL.Models.RecipientGroup", "RecipientGroup")
                        .WithMany("RecipientGroupEmployees")
                        .HasForeignKey("RecipientGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("RecipientGroup");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.Employee", b =>
                {
                    b.Navigation("RecipientGroupEmployees");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.IssuingUnit", b =>
                {
                    b.Navigation("IncomingDocuments");

                    b.Navigation("OutgoingDocuments");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocumentFormat", b =>
                {
                    b.Navigation("OutgoingDocuments");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.OutgoingDocumentType", b =>
                {
                    b.Navigation("OutgoingDocumentFormats");

                    b.Navigation("OutgoingDocuments");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.RecipientGroup", b =>
                {
                    b.Navigation("IncomingDocuments");

                    b.Navigation("OutgoingDocuments");

                    b.Navigation("RecipientGroupEmployees");
                });

            modelBuilder.Entity("DocumentManager.DAL.Models.RelatedProject", b =>
                {
                    b.Navigation("IncomingDocuments");

                    b.Navigation("OutgoingDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
